rf
plot(rf)
summary(rf)
#Regresiones esc + edad + sexo
# Entrenar modelo lineal
set.seed(1239)
lm = train(log(ingreso) ~ esc + edad + sexo,
train,
method = 'lm',
trControl = param)
lm
summary(lm)
set.seed(1237)
en = train(ingreso ~ esc + edad + sexo,
train,
method = 'glmnet',
tuneGrid = expand.grid(alpha = seq(0, 1, length = 10),
lambda = seq(0.0001, 0.1, length = 5)),
trControl = param)
en
summary(en)
param = trainControl(method = "adaptive_cv",
number = 500)
rf = randomForest(ingreso ~ esc + edad + sexo, data = train, trControl = param, ntree = 1000)
rf$rsq
rf
plot(rf)
summary(rf)
#Elastic net es la mejor regresión
#analizar betas, solo eso, igual poner un grafico
#beta negativo (valor de referencia), contabilizar el sexo.
library(caret)
library(psych)
library(RPostgreSQL)
library(dplyr)
library(ggplot2)
library(GGally)
library(randomForest)
library(rmarkdown)
#Conectar con dbpsql
#clave de acceso
pw = {
"admin"
}
drv = dbDriver("PostgreSQL")
#Crear conexión a base de datos
con = dbConnect(drv, dbname = "postgres",
host = "localhost", port = 5432,
user = "postgres", password = "admin")
#Solicitud SQL data "general"
q = "SELECT ytotcor as ingreso, edad, esc, sexo, expc FROM public.casen;"
data = dbSendQuery(con, q)
data = dbFetch(data)
#analisis exploratorio
head(data)
summary(data)
#Histograma ingresos sin factor de expansion
data$ingreso = as.numeric(data$ingreso)
hist(data$ingreso, breaks = "FD",main = "histograma Ingreso sin factor de expansion", xlab = "Ingreso total corregido" ,xlim = c(0,4000000))
#Histograma ingresos con factor de expansión
#q = "SELECT ytotcor, COUNT(ytotcor), SUM(CAST(expc AS DOUBLE PRECISION)) as ToTingr FROM public.casen GROUP BY ytotcor ORDER BY LENGTH(ytotcor),ytotcor;"
#data_ytotcor = dbSendQuery(con, q)
#data_ytotcor = dbFetch(data_ytotcor)
#ata_ytotcor = data_ytotcor[-2,]
#data_ytotcor$ytotcor = as.numeric(data_ytotcor$ytotcor)
#arplot(data_ytotcor$totingr, names.arg=data_ytotcor$ytotcor ,xlab="Ingresos",ylab="Frecuencia",col="blue",
#       main="Histograma ingresos GS con factor de expansion", border="black")
#Histograma Edad sin factor de expansion
data$edad = as.numeric(data$edad)
hist(data$edad, breaks = "FD",main = "histograma edad sin factor de expansion", xlab = "Edad" )
#Histograma Edad con factor de expansion
q = "SELECT edad, COUNT(edad), SUM(CAST(expc AS DOUBLE PRECISION)) as Totedad FROM public.casen GROUP BY edad ORDER BY LENGTH(edad),edad;"
data_edad = dbSendQuery(con, q)
data_edad = dbFetch(data_edad)
barplot(data_edad$totedad,names.arg=data_edad$edad ,xlab="Edad",ylab="Frecuencia",col="blue",
main="Histograma Edad GS con Factor de expansion",border="black")
#Histograma escolaridad sin factor de expansion
data$esc = as.numeric(data$esc)
hist(data$esc, breaks = "FD",main = "histograma de años de escolaridad sin factor de expansion", xlab = "Años de escolaridad")
#Histograma Escolaridad con factor de expansion
q = "SELECT esc, COUNT(esc), SUM(CAST(expc AS DOUBLE PRECISION)) as TotEsc FROM public.casen GROUP BY esc ORDER BY LENGTH(esc),esc;"
data_esc = dbSendQuery(con, q)
data_esc = dbFetch(data_esc)
data_esc = data_esc[-24,]
barplot(data_esc$totesc,names.arg=data_esc$esc  ,xlab="Años de escolaridad",ylab="Frecuencia",col="blue",
main="Histograma Escolaridad GS con Factor de expansion",border="black")
#Regresiones
#respaldar data
data_resp = data
#data = data_resp
# Separar datos en 70% de entrenamiento y 30% de prueba
data = data[c(1,2,3,4)]
data = data[complete.cases(data), ]
data = data[!(data$ingreso >10000000 | data$edad > 65 | data$esc <8 ),]
ggpairs(data, title="Correlacion de variables")
ggplot(data, aes(x=log(ingreso), y=esc)) + geom_point()
set.seed(5)
ind = sample(2, nrow(data), replace = T, prob = c(0.7, 0.3))
train = data[ind==1,]
test = data[ind==2,]
# Definir entrenamiento
param = trainControl(method = "cv",
number = 20,
repeats = 50)
#Regresiones esc + edad
# Entrenar modelo lineal
set.seed(1239)
lm = train(log(ingreso) ~ esc + edad,
train,
method = 'lm',
trControl = param)
lm
summary(lm)
set.seed(1237)
en = train(ingreso ~ esc + edad ,
train,
method = 'glmnet',
tuneGrid = expand.grid(alpha = seq(0, 1, length = 10),
lambda = seq(0.0001, 0.1, length = 5)),
trControl = param)
en
summary(en)
param = trainControl(method = "adaptive_cv",
number = 500)
rf = randomForest(log(ingreso) ~ esc + edad, data = train, trControl = param, ntree = 1000)
rf$rsq
rf
plot(rf)
summary(rf)
#Regresiones esc + edad + sexo
param = trainControl(method = "cv",
number = 20,
repeats = 50)
# Entrenar modelo lineal
set.seed(1239)
lm = train(log(ingreso) ~ esc + edad + sexo,
train,
method = 'lm',
trControl = param)
lm
summary(lm)
set.seed(1237)
en = train(ingreso ~ esc + edad + sexo,
train,
method = 'glmnet',
tuneGrid = expand.grid(alpha = seq(0, 1, length = 10),
lambda = seq(0.0001, 0.1, length = 5)),
trControl = param)
en
summary(en)
param = trainControl(method = "adaptive_cv",
number = 500)
rf = randomForest(ingreso ~ esc + edad + sexo, data = train, trControl = param, ntree = 1000)
rf$rsq
rf
plot(rf)
summary(rf)
#Elastic net es la mejor regresión
#analizar betas, solo eso, igual poner un grafico
#beta negativo (valor de referencia), contabilizar el sexo.
---
title: "Trabajo 1 Geomarketing"
author: "Pedro Pablo Silva Antilef"
date: "7 de mayo de 2020"
output: html_document
---
---
title: "Trabajo 1 Geomarketing"
author: "Pedro Pablo Silva Antilef"
date: "7 de mayo de 2020"
output: html_document
---
# Introducción
En este trabajo se analizará la base de datos de la Encuesta de Caracterización Socioeconomica Nacional,
específicamente de las variables Ingresos corregidos (ytotcor), Edad (edad), Años de escolaridad (esc) y
finalmente el sexo de la persona encuestada. La idea es explorar la base de datos y limpiarla.
Posteriormente se realizarán regresiones considerando los ingresos como la variable dependiente y
los años de escolaridad y la edad para las primeras regresiones. Para el segundo grupo de regresiones se
adicionará al análisis la variable Edad como dummy.
# Se importan los datos desde BD Postgres que contiene todos los datos de la encuesta
```{R, eval=FALSE}
library(caret)
library(psych)
library(RPostgreSQL)
library(dplyr)
library(ggplot2)
library(GGally)
library(randomForest)
library(rmarkdown)
#Conectar con dbpsql
#clave de acceso
pw = {
"admin"
}
drv = dbDriver("PostgreSQL")
#Crear conexión a base de datos
con = dbConnect(drv, dbname = "postgres",
host = "localhost", port = 5432,
user = "postgres", password = "admin")
#Solicitud SQL data "general"
q = "SELECT ytotcor as ingreso, edad, esc, sexo, expc FROM public.casen;"
data = dbSendQuery(con, q)
data = dbFetch(data)
```
# Análisis exploratorio
Primero haremos un análisis exploratorio de las variables 3 variables consideradas en el estudio. Primero
veremos los headers del dataset, veremos los histogramas de cada variable en "crudo" y también un histograma
de las variables multiplicado por el factor de expansión comunal(expc).
Vemos los primeros registros del dataset
```{r}
# analisis exploratorio
head(data)
summary(data)
```
## Histogramas
Podemos ver que los gráficos que consideran el factor de expansión de paracen bastante a los que no lo consideran
por lo que podríamos decir que son representativos de la población estudiada.
### Histograma Ingreso
```{R, eval=FALSE}
#Histograma Edad sin factor de expansion
data$edad = as.numeric(data$edad)
hist(data$edad, breaks = "FD",main = "histograma edad sin factor de expansion", xlab = "Edad" )
#Histograma Edad con factor de expansion
q = "SELECT edad, COUNT(edad), SUM(CAST(expc AS DOUBLE PRECISION)) as Totedad FROM public.casen GROUP BY edad ORDER BY LENGTH(edad),edad;"
data_edad = dbSendQuery(con, q)
data_edad = dbFetch(data_edad)
barplot(data_edad$totedad,names.arg=data_edad$edad ,xlab="Edad",ylab="Frecuencia",col="blue",
main="Histograma Edad GS con Factor de expansion",border="black")
```
```{r}
barplot(data_edad$totedad,names.arg=data_edad$edad ,xlab="Edad",ylab="Frecuencia",col="blue",
main="Histograma Edad GS con Factor de expansion",border="black")
```
El histograma de ingreso se realizó sin considerar el factor de expansión y tiene una distribución esperada.
Ya que la mayor frecuencia de sueldos se encuentra en sueldos bajos, donde la mayor frecuencia fluctua en valores
menores al sueldo mínimo nacional.
```{R, eval=FALSE}
```
### Histograma Edad
Para el histograma de edad, se aprecia una pequeña diferencia en el histograma sin considerar el factod de expansión
en cuanto al rango más pequeño, donde tiene una frecuencia considerablemente más alta que en el histograma considerando
el factor de expansión. Esta alta frecuencia parece ser aplanada con el factor de expansión. El resto del histograma
parece concordar con la situación poblacional de Chile, una población relativamente joven, que tiene a envejecer,
situación demográfica típica de los paises en "vías de desarrollo"
```{R, eval=FALSE}
```
### Histograma Escolaridad
Este es uno de los histogramas que presenta una mayor concordancia, y que además tienen coherencia ambos histogramas.
Se aprecia un peak de frecuencia en los 12 años de escolaridad, lo cual concuerda con los años de educación obligatoria
del pais. La siguiente frecuencia más alta se encuentra en los 17 años de estudio, lo que equivaldría a una educación
universitaria completa. El tercer peak corresponde a los 15 años de escolaridad, lo que correspondería a una carrera
técnica profesional completa y cualquier otro estudio superior incompleta. Se considera que el valor 8, debería tener
mayor frecuencia, ya que corresponde a la enseñanza básica completa y según el Censo población y vivienda 2017, este año
debería tener una mayor frecuencia relativa al resto de años de escolaridad, se recomienda considerar una comparasión
con dicha encuesta en un trabajo futuro.
```{R, eval=FALSE}
```
## Se limpian los datos y se analiza matríz de correlación.
Se procede a analizar la correlación entre las variables que se utilizarán. En la matríz de correlación podemos
observar que nuestra variable dependiente tiene una bara correlación con la edad (0.141), lo cual tiene sentido
ya que muchas veces se considera a las personas menores con poca experiencia y a las personas mayores como desactualizadas.
Además es muy probable que el ingreso depende más de los años de estudios cursados y del nivel de renta asociado a los
estudios realizados. Como se dijo anteriormente, los años de escolaridad tienen una correlación de 0.495, lo que demuestra
que puede existir una relación positiva entre dichos años de estudio y los ingresos percividos por el individuo.
```{R, eval=FALSE}
```
## Regresiones
Se decidió utilizar 3 tipos de regresiones para analizar nuestro dataset. Los modelos utilizados fueron:
Regresión lineal de mínimos cuadrados
Regresion lineal Elastic Net
Regresión Random Forest
Para cada regresión se separó la muestra y se utilizó un 70% de los datos para entrenar los modelos y un 30% para la validación
cruzada.
### Regresión Ingreso = Años de escolaridad + Edad
#### Regresión lineal Sin Sexo
Para entrenar esta regresión se utilizó el método cv y se obtuvo un R2 de 0.2884, lo que evidencia un bajo ajuste de la regresión
hacia los datos, probablemente por la dispersión de los mismos. Por otro lado el RMSE obtuvo un valor de 1.045347.
asd
```{R, eval=FALSE}
```
### Regresión Ingreso = Años de escolaridad + Edad + Sexo
```{R, eval=FALSE}
```
```{R, eval=FALSE}
```
View(data)
library(caret)
library(psych)
library(RPostgreSQL)
library(dplyr)
library(ggplot2)
library(GGally)
library(randomForest)
library(rmarkdown)
#Conectar con dbpsql
#clave de acceso
pw = {
"admin"
}
drv = dbDriver("PostgreSQL")
#Crear conexión a base de datos
con = dbConnect(drv, dbname = "postgres",
host = "localhost", port = 5432,
user = "postgres", password = "admin")
#Solicitud SQL data "general"
q = "SELECT ytotcor as ingreso, edad, esc, sexo, expc FROM public.casen;"
data = dbSendQuery(con, q)
data = dbFetch(data)
head(data)
summary(data)
#Histograma Edad sin factor de expansion
data$edad = as.numeric(data$edad)
hist(data$edad, breaks = "FD",main = "histograma edad sin factor de expansion", xlab = "Edad" )
#Histograma Edad con factor de expansion
q = "SELECT edad, COUNT(edad), SUM(CAST(expc AS DOUBLE PRECISION)) as Totedad FROM public.casen GROUP BY edad ORDER BY LENGTH(edad),edad;"
data_edad = dbSendQuery(con, q)
data_edad = dbFetch(data_edad)
head(data)
summary(data)
head(data)
summary(data)
head(data)
View(data)
summary(data)
barplot(data_edad$totedad,names.arg=data_edad$edad ,xlab="Edad",ylab="Frecuencia",col="blue",
main="Histograma Edad GS con Factor de expansion",border="black")
barplot(data_edad$totedad,names.arg=data_edad$edad ,xlab="Edad",ylab="Frecuencia",col="blue",
main="Histograma Edad GS con Factor de expansion",border="black")
#Histograma Edad sin factor de expansion
data$edad = as.numeric(data$edad)
hist(data$edad, breaks = "FD",main = "histograma edad sin factor de expansion", xlab = "Edad" )
#Histograma Edad con factor de expansion
q = "SELECT edad, COUNT(edad), SUM(CAST(expc AS DOUBLE PRECISION)) as Totedad FROM public.casen GROUP BY edad ORDER BY LENGTH(edad),edad;"
data_edad = dbSendQuery(con, q)
data_edad = dbFetch(data_edad)
barplot(data_edad$totedad,names.arg=data_edad$edad ,xlab="Edad",ylab="Frecuencia",col="blue",
main="Histograma Edad GS con Factor de expansion",border="black")
barplot(data_edad$totedad,names.arg=data_edad$edad ,xlab="Edad",ylab="Frecuencia",col="blue",
main="Histograma Edad GS con Factor de expansion",border="black")
barplot(data_edad$totedad,names.arg=data_edad$edad ,xlab="Edad",ylab="Frecuencia",col="blue",
main="Histograma Edad GS con Factor de expansion",border="black")
#respaldar data
data_resp = data
#data = data_resp
# Separar datos en 70% de entrenamiento y 30% de prueba
data = data[c(1,2,3,4)]
data = data[complete.cases(data), ]
data = data[!(data$ingreso >10000000 | data$edad > 65 | data$esc <8 ),]
#respaldar data
data_resp = data
library(caret)
library(psych)
library(RPostgreSQL)
library(dplyr)
library(ggplot2)
library(GGally)
library(randomForest)
library(rmarkdown)
#Conectar con dbpsql
#clave de acceso
pw = {
"admin"
}
drv = dbDriver("PostgreSQL")
#Crear conexión a base de datos
con = dbConnect(drv, dbname = "postgres",
host = "localhost", port = 5432,
user = "postgres", password = "admin")
#Solicitud SQL data "general"
q = "SELECT ytotcor as ingreso, edad, esc, sexo, expc FROM public.casen;"
data = dbSendQuery(con, q)
data = dbFetch(data)
#analisis exploratorio
head(data)
summary(data)
#Histograma ingresos sin factor de expansion
data$ingreso = as.numeric(data$ingreso)
hist(data$ingreso, breaks = "FD",main = "histograma Ingreso sin factor de expansion", xlab = "Ingreso total corregido" ,xlim = c(0,4000000))
#Histograma ingresos con factor de expansión
#q = "SELECT ytotcor, COUNT(ytotcor), SUM(CAST(expc AS DOUBLE PRECISION)) as ToTingr FROM public.casen GROUP BY ytotcor ORDER BY LENGTH(ytotcor),ytotcor;"
#data_ytotcor = dbSendQuery(con, q)
#data_ytotcor = dbFetch(data_ytotcor)
#ata_ytotcor = data_ytotcor[-2,]
#data_ytotcor$ytotcor = as.numeric(data_ytotcor$ytotcor)
#arplot(data_ytotcor$totingr, names.arg=data_ytotcor$ytotcor ,xlab="Ingresos",ylab="Frecuencia",col="blue",
#       main="Histograma ingresos GS con factor de expansion", border="black")
#Histograma Edad sin factor de expansion
data$edad = as.numeric(data$edad)
hist(data$edad, breaks = "FD",main = "histograma edad sin factor de expansion", xlab = "Edad" )
#Histograma Edad con factor de expansion
q = "SELECT edad, COUNT(edad), SUM(CAST(expc AS DOUBLE PRECISION)) as Totedad FROM public.casen GROUP BY edad ORDER BY LENGTH(edad),edad;"
data_edad = dbSendQuery(con, q)
data_edad = dbFetch(data_edad)
barplot(data_edad$totedad,names.arg=data_edad$edad ,xlab="Edad",ylab="Frecuencia",col="blue",
main="Histograma Edad GS con Factor de expansion",border="black")
#Histograma escolaridad sin factor de expansion
data$esc = as.numeric(data$esc)
hist(data$esc, breaks = "FD",main = "histograma de años de escolaridad sin factor de expansion", xlab = "Años de escolaridad")
#Histograma Escolaridad con factor de expansion
q = "SELECT esc, COUNT(esc), SUM(CAST(expc AS DOUBLE PRECISION)) as TotEsc FROM public.casen GROUP BY esc ORDER BY LENGTH(esc),esc;"
data_esc = dbSendQuery(con, q)
data_esc = dbFetch(data_esc)
data_esc = data_esc[-24,]
barplot(data_esc$totesc,names.arg=data_esc$esc  ,xlab="Años de escolaridad",ylab="Frecuencia",col="blue",
main="Histograma Escolaridad GS con Factor de expansion",border="black")
#Regresiones
#respaldar data
data_resp = data
#data = data_resp
# Separar datos en 70% de entrenamiento y 30% de prueba
data = data[c(1,2,3,4)]
data = data[complete.cases(data), ]
data = data[!(data$ingreso >10000000 | data$edad > 65 | data$esc <8 ),]
ggpairs(data, title="Correlacion de variables")
ggplot(data, aes(x=log(ingreso), y=esc)) + geom_point()
set.seed(5)
ind = sample(2, nrow(data), replace = T, prob = c(0.7, 0.3))
train = data[ind==1,]
test = data[ind==2,]
# Definir entrenamiento
param = trainControl(method = "cv",
number = 20,
repeats = 50)
#Regresiones esc + edad
# Entrenar modelo lineal
set.seed(1239)
lm = train(log(ingreso) ~ esc + edad,
train,
method = 'lm',
trControl = param)
lm
summary(lm)
set.seed(1237)
en = train(ingreso ~ esc + edad ,
train,
method = 'glmnet',
tuneGrid = expand.grid(alpha = seq(0, 1, length = 10),
lambda = seq(0.0001, 0.1, length = 5)),
trControl = param)
en
summary(en)
param = trainControl(method = "adaptive_cv",
number = 500)
rf = randomForest(log(ingreso) ~ esc + edad, data = train, trControl = param, ntree = 1000)
rf$rsq
rf
plot(rf)
summary(rf)
#Regresiones esc + edad + sexo
param = trainControl(method = "cv",
number = 20,
repeats = 50)
# Entrenar modelo lineal
set.seed(1239)
lm = train(log(ingreso) ~ esc + edad + sexo,
train,
method = 'lm',
trControl = param)
lm
summary(lm)
set.seed(1237)
en = train(ingreso ~ esc + edad + sexo,
train,
method = 'glmnet',
tuneGrid = expand.grid(alpha = seq(0, 1, length = 10),
lambda = seq(0.0001, 0.1, length = 5)),
trControl = param)
en
summary(en)
param = trainControl(method = "adaptive_cv",
number = 500)
rf = randomForest(ingreso ~ esc + edad + sexo, data = train, trControl = param, ntree = 1000)
rf$rsq
rf
plot(rf)
summary(rf)
#Elastic net es la mejor regresión
#analizar betas, solo eso, igual poner un grafico
#beta negativo (valor de referencia), contabilizar el sexo.
plot(lm)
head(rf$rsq)
tail(rf$rsq)
coef(en)
coef(rf)
get_params(en)
View(en)
parameters(en)
View(en)
en$modelInfo
en$coefnames
en$modelType
en$results
en$pred
en$bestTune
en$call
en$dots
en$metric
en$control
en$finalModel
en$preProcess
en$trainingData
en$resample
en$perfNames
en$levels
en$xlevels
en$contrasts
coef(en, s=en$lambda.1se)
coef(en, s=en$lambda)
coef(model$finalModel)
coef(en$finalModel)
tail(coef(en$finalModel))
tail(coef(en$finalModel))
